/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package interviewkmp;

import java.util.Arrays;

/**
 *
 * @author wangsumei
 */
public class InterviewKMP {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        String txt="ABABDABACDABABCABAB";
        String pat="ABABCABAB";
        new InterviewKMP().KMPSearch(pat, txt);
    }
    void KMPSearch(String pat,String txt){
        int M=pat.length();
        int N=txt.length();
        
        int lps[]=new int[M];
        int j=0;
        
        computeLPSArray(pat,M,lps);
        
        int i=0;
        while(i<N){
            if(pat.charAt(j)==txt.charAt(i)){
                j++;
                i++;
            }
            if(j==M){
                System.out.println("Found pattern at index "+(i-j));
                j=lps[j-1];
            }
            else if(i<N && pat.charAt(j)!=txt.charAt(i)){
                if(j!=0)
                    j=lps[j-1];
                else
                    i=i+1;
            }
        }
    }
    void computeLPSArray(String pat,int M,int lps[]){
        int len=0;
        int i=1;
        lps[0]=0;
        //System.out.println("pat="+pat);
        while(i<M){
            
            //System.out.print("pat.charAt("+i+")="+pat.charAt(i)+"  ");
            //System.out.println("pat.charAt("+len+")="+pat.charAt(len));
            if(pat.charAt(i)==pat.charAt(len)){
                len++;
                lps[i]=len;
                i++;
            }else{
                if(len!=0){
                    len=lps[len-1];
                }else{
                    lps[i]=len;
                    i++;
                }
            }
        }
//        for(int p=0;p<lps.length;p++){
//            System.out.println("lps["+p+"]"+lps[p]);
//        }
    }
}
//A B A B C A B A B
//0 0 
//A :0
//AB:0
//ABA : [A,AB],[BA,A]:1
//ABAB:[A,AB,ABA],[BAB,AB,B]:1
//ABABC:[A,AB,ABA,ABAB],[BABC,ABC,BC,C]:0
//ABABCA:[A,AB,ABA,ABAB,ABABC],[BABCA,ABCA,BCA,CA,A]:1
//ABABCAB:[A,AB,ABA,ABAB,ABABC,ABABCA],[BABCAB,ABCAB,BCAB,CAB,AB,B]:1
//ABABCABA
  
//A,AB,ABA,ABAB,ABABC,ABABCA,ABABCAB,ABABCABA
//BABCABAB,ABCABAB,BCABAB,CABAB,ABAB,BAB,AB,B
