<?php
$code=new Code();
//echo $code->code;  //verification string
$code->outImage(); //verification image


class Code{
    //the number of verification 
    protected $number;

    //the type of verification
    protected $codeType;

    //picture with
    protected $width;

    //picture height
    protected $height;

    //picture resource
    protected $image;

    //the string of verification
    protected $code;

    public function __construct($number=4,$codeType=2,$width=100,$height=50){
        //initialize 
        $this->number=$number;
        $this->codeType=$codeType;
        $this->width=$width;
        $this->height=$height;

        //create the verification code
        $this->code=$this->createCode();

    }

    public function __destruct(){
        imagedestroy($this->image);
    }

    public function __get($name){
        if($name=='code'){
            return $this->code;
        }
        return false;
    }
    protected function createCode(){
        //create the verification code depending on your codeType
        switch($this->codeType){
            case 0: //number
                $code=$this->getNumberCode();
                break;
            case 1: //letter
                $code=$this->getCharCode();
                break;
            case 2: //number+letter
                $code=$this->getNumCharCode();
                break;
            default:
                die("Don't support this verification type");
        }
        return $code;
    }

    protected function getNumberCode(){
        $str=join('',range(0,9));
        return substr(str_shuffle($str),0,$this->number);
    }
    
    protected function getCharCode(){
        $str=join('',range('a','z'));
        $str=$str.strtoupper($str);
        return substr(str_shuffle($str),0,$this->number);
    }

    protected function getNumCharCode(){
        $str1=join('',range(0,9));
        $str=join('',range('a','z'));
        $str=$str1.$str.strtoupper($str);
        return substr(str_shuffle($str),0,$this->number);
    }

    public function outImage(){
        //create canvas
        $this->createImage();
        //fill color
        $this->fillBack();
        //fill the verification string to the canvas
        $this->drawChar();
        //add interference elements
        $this->drawDisturb();
        //output
        $this->show();
    }

    protected function createImage(){
        $this->image=imagecreatetruecolor($this->width,$this->height);
    }

    protected function fillBack(){
        imagefill($this->image,0,0,$this->lightColor());
    }

    protected function lightColor(){
        return imagecolorallocate($this->image, mt_rand(130,255), mt_rand(130,255), mt_rand(130,255));
    }

    protected function darkColor(){
        return imagecolorallocate($this->image, mt_rand(0,120), mt_rand(0,120), mt_rand(0,120));
    }

    protected function drawChar(){
        $width=ceil($this->width/$this->number);
        for($i=0;$i<$this->number;$i++){
            $x=mt_rand($i*$width+5,($i+1)*$width-10);
            $y=mt_rand(0,$this->height-15);
            imagechar($this->image, 15, $x, $y, $this->code[$i], $this->darkColor());
        }
    }

    protected function drawDisturb(){
        for($i=0;$i<150;$i++){
            $x=mt_rand(0,$this->width);
            $y=mt_rand(0,$this->height);
            imagesetpixel($this->image,$x,$y,$this->lightColor());
        }
    }

    protected function show(){
        header('Content-Type:image/png');
        imagepng($this->image);
    }
}
?>
