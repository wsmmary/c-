<?php
$image=new Image();
//$image->water('picture.jpg','images.jpg',9);
$image->zoom('picture.jpg',1500,1000);

class Image{
	//path
	protected $path;
	//if using the random name
	protected $isRandName;
	//the type of image
	protected $type;

	function __construct($path='./',$isRandName=true,$type='png'){
		$this->path=$path;
		$this->isRandName=$isRandName;
		$this->type=$type;
	}

	function water($image,$water,$position,$transparency=100,$prefix='water_'){
		//1,check whether two images are exist or not
		if((!file_exists($image)) || (!file_exists($water))){
			die('The image is not exist');
		}

		//2,get the width and height of two images
		$imageInfo=self::getImageInfo($image);
		$waterInfo=self::getImageInfo($water);

		//3,check could water image past on the original image
		if(!$this->checkImage($imageInfo,$waterInfo)){
			exit('The water image is too big');
		}

		//4,open the image
		$imageRes=self::openAnyImage($image);
		$waterRes=self::openAnyImage($water);

		//5,calculate the position
		$pos=$this->getPosition($position,$imageInfo,$waterInfo);

		//6,past the water image
		imagecopymerge($imageRes, $waterRes, $pos['x'], $pos['y'], 0, 0, $waterInfo['width'], $waterInfo['height'], $transparency);

		//7,get the file name of new image
		$newName=$this->createNewName($image,$prefix);

		//8,get the path of new image
		$newPath=rtrim($this->path,'/').'/'.$newName;

		//9,save the image
		$this->saveImage($imageRes,$newPath);

		//10,destory the image
		imagedestroy($imageRes);
		imagedestroy($waterRes);

		return $newPath;
	}

	function zoom($image,$width,$height,$prefix='zo_'){
		//1.get the original width and height
		$info=self::getImageInfo($image);

		//2.calculate the with and height
		$size=$this->getNewSize($width,$height,$info);

		//3.open the image
		$imageRes=self::openAnyImage($image);

		//4.zoom
		$newRes=$this->kidOfImage($imageRes,$size,$info);

		//5.save 
		$newName=$this->createNewName($image,$prefix);
		$newPath=rtrim($this->path,'/').'/'.$newName;
		$this->saveImage($newRes,$newPath);

		//6.destory
		imagedestroy($imageRes);
		imagedestroy($newRes);

	}

	//to process the transparency
	protected function kidOfImage($srcImg,$size,$imgInfo){
		$newImg=imagecreatetruecolor($size['old_w'], $size['old_h']);  //create a new picture

		$otsc=imagecolortransparent($srcImg);

		if($otsc>=0){
			$transparentcolor=imagecolorsforindex($srcImg, $otsc);
			$newtransparentcolor=imagecolorallocate($newImg, $transparentcolor['red'], $transparentcolor['green'], $transparentcolor['blue']);
		}else{
			$newtransparentcolor=imagecolorallocate($newImg, 0, 0, 0);
		}
		imagefill($newImg,0,0,$newtransparentcolor);
		imagecolortransparent($newImg,$newtransparentcolor);

		imagecopyresampled($newImg, $srcImg, $size['x'], $size['y'], 0, 0, $size['new_w'], $size['new_h'],$imgInfo['width'],$imgInfo['height']);
		return $newImg;
	}

	//get the with and height
	protected function getNewSize($width,$height,$imgInfo){
		$size['old_w']=$width;
		$size['old_h']=$height;

		$scaleWidth=$width/$imgInfo['width'];
		$scaleHeight=$height/$imgInfo['height'];
		$scaleFinal=min($scaleWidth,$scaleHeight);

		$size['new_w']=round($imgInfo['width']*$scaleFinal);
		$size['new_h']=round($imgInfo['height']*$scaleFinal);

		if($scaleWidth<$scaleHeight){
			$size['x']=0;
			$size['y']=round(abs($size['new_h']-$height)/2);
		}else{
			$size['y']=0;
			$size['x']=round(abs($size['new_w']-$width)/2);
		}
		return $size;
	}

	protected function saveImage($imageRes,$newPath){
		$func='image'.$this->type;
		$func($imageRes,$newPath);
	}

	protected function createNewName($imagePath,$prefix){
		if($this->isRandName){
			$name=$prefix.uniqid().'.'.$this->type;
		}else{
			$name=$prefix.pathinfo($imagePath)['filename'].'.'.$this->type;
		}
		return $name;
	}

	protected function getPosition($position,$imageInfo,$waterInfo){
		switch ($position) {
			case 1:
				$x=0;
				$y=0;
				break;
			case 2:
				$x=($imageInfo['width']-$waterInfo['width'])/2;
				$y=0;
				break;
			case 3:
				$x=$imageInfo['width']-$waterInfo['width'];
				$y=0;
				break;
			case 4:
				$x=0;
				$y=($imageInfo['height']-$waterInfo['height'])/2;
				break;	
			case 5:
				$x=($imageInfo['width']-$waterInfo['width'])/2;
				$y=($imageInfo['height']-$waterInfo['height'])/2;
				break;
			case 6:
				$x=$imageInfo['width']-$waterInfo['width'];
				$y=($imageInfo['height']-$waterInfo['height'])/2;
				break;
			case 7:
				$x=0;
				$y=$imageInfo['height']-$waterInfo['height'];
				break;
			case 8:
				$x=($imageInfo['width']-$waterInfo['width'])/2;
				$y=$imageInfo['height']-$waterInfo['height'];
				break;																				
			case 9:
				$x=$imageInfo['width']-$waterInfo['width'];
				$y=$imageInfo['height']-$waterInfo['height'];
				break;
			case 0:
				$x=mt_rand(0,($imageInfo['width']-$waterInfo['width']));
				$y=mt_rand(0,($imageInfo['height']-$waterInfo['height']));
				break;									
		}
		return ['x'=>$x,'y'=>$y];
	}

	protected function checkImage($imageInfo,$waterInfo){
		if(($waterInfo['width']>$imageInfo['width']) || ($waterInfo['height']>$imageInfo['height'])){
			return false;
		}
		return true;
	}

	//get the image infomation
	static function getImageInfo($imagePath){
		$info=getimagesize($imagePath);
		$data['width']=$info[0];
		$data['height']=$info[1];
		$data['mime']=$info['mime'];
		return $data;
	}

	static function openAnyImage($imagePath){
		$mime=self::getImageInfo($imagePath)['mime'];
		switch ($mime) {
			case 'image/png':
				$image=imagecreatefrompng($imagePath);
				break;
			case 'imge/gif':
				$image=imagecreatefromgif($imagePath);
				break;
			case 'image/jpeg':
				$image=imagecreatefromjpeg($imagePath);
				break;
			case 'image/wbmp':
				$image=imagecreatefromwbmp($imagePath);
				break;
		}
		return $image;
	}
}
?>
