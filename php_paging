<?php
$page=new Page(5,60);
//echo $page->getUrl();
var_dump($page->allUrl());

class Page{
	protected $number; //the number of each page
	protected $totalCount; //total records
	protected $page; //current page
	protected $totalPage; //total pages
	protected $url; //url


	public function __construct($number,$totalCount){
		
		$this->number=$number;
		$this->totalCount=$totalCount;
		//get the total pages
		$this->totalPage=$this->getTotalPage();

		//get the current page
		$this->page=$this->getPage();

		//get the url
		$this->url=$this->getUrl();
		echo $this->url;
	}

	protected function setUrl($str){
		if(strstr($this->url,'?')){
			$url=$this->url.'&'.$str;
		}else{
			$url=$this->url.'?'.$str;
		}
		return $url;
	}

	protected function getUrl(){
		$scheme=$_SERVER['REQUEST_SCHEME'];  //get the protocol
		$host=$_SERVER['SERVER_NAME'];  //get the server's name
		$port=$_SERVER['SERVER_PORT'];  //get the port
		$uri=$_SERVER['REQUEST_URI'];  //get the path and request string

		//add the page parameter into the url(ex:page=5)
		//if there is a page parameter in the url, the first step should cleaning this page parameter
		$uriArray=parse_url($uri);
		$path=$uriArray['path'];

		if(!empty($uriArray['query'])){
			parse_str($uriArray['query'],$array);  //change the request string to associate array
			unset($array['page']);	//clean the page in the associate array
			$query=http_build_query($array); //using the rest infor to making a new request string
			if($query!=''){
				$path=$path.'?'.$query;  //connecting the request string behinde the path
			}
		}

		return $scheme.'://'.$host.':'.$port.$path;
	}

	protected function getPage(){
		if(empty($_GET['page'])){
			$page=1;
		}else if($_GET['page']>$this->totalPage){
			$page=$this->totalPage;
		}else if($_GET['page']<1){
			$page=1;
		}else{
			$page=$_GET['page'];
		}
		return $page;
	}

	protected function getTotalPage(){
		return ceil($this->totalCount/$this->number);
	}

	public function allUrl(){
		return [
			'first'=>$this->first(),
			'prev'=>$this->prev(),
			'next'=>$this->next(),
			'end'=>$this->end()
		];
	}

	public function first(){
		return $this->setUrl('page=1');
	}

	public function next(){
		//getting the next page depende on the current page 
		if($this->getPage()+1>$this->totalPage){
			$page=$this->totalPage;
		}else{
			$page=$this->page+1;
		}
		return $this->setUrl('page='.$page);
	}

	public function prev(){
		if($this->getPage()-1<1){
			$page=1;
		}else{
			$page=$this->page-1;
		}
		return $this->setUrl('page='.$page);
	}

	public function end(){
		return $this->setUrl('page='.$this->totalPage);
	}

	public function limit(){
		$offset=($this->page-1)*$this->number;
		return $offset.','.$this->number;
	}
}
?>
